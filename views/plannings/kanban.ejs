<!DOCTYPE html>
<html lang="fr">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Kanban - Soakoja</title>
    <link href="https://cdn.jsdelivr.net/npm/quill@2.0.2/dist/quill.snow.css" rel="stylesheet">
    <link rel="stylesheet" href="/css/style.css">
    <link href="https://unpkg.com/quill-better-table@1.2.10/dist/quill-better-table.css" rel="stylesheet">
    <style>
        .kanban-board {
            display: flex;
            gap: 1.5rem;
            overflow-x: auto;
            padding: 1rem 0; /* Adjusted padding */
            min-height: 80vh; /* Adjusted height */
        }
        .kanban-column {
            flex: 1;
            min-width: 320px;
            max-width: 350px;
            background: var(--bg-tertiary);
            border-radius: 8px;
            padding: 1rem;
            display: flex;
            flex-direction: column;
        }
        .kanban-column-header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            padding: 0 0.5rem 1rem 0.5rem;
            border-bottom: 3px solid; /* Color will be set by JS */
            margin-bottom: 1rem;
        }
        .kanban-column-header h3 {
            margin: 0;
            font-size: 1.1rem;
            color: var(--text-primary);
        }
        .kanban-column-header .count {
            background: #e0e0e0;
            color: var(--text-primary);
            border-radius: 10px;
            padding: 2px 8px;
            font-size: 0.9rem;
            font-weight: bold;
        }

        .kanban-cards {
            display: flex;
            flex-direction: column;
            gap: 1rem;
            flex-grow: 1;
            overflow-y: auto;
            padding-right: 5px;
        }
        .kanban-card {
            background: var(--bg-secondary);
            border-radius: 5px;
            padding: 1rem;
            box-shadow: 0 2px 5px var(--shadow-color);
            border-left: 4px solid; /* Color will be set by JS */
        }

        .kanban-card h4 {
            margin: 0 0 0.5rem 0;
            font-size: 1rem;
        }
        .kanban-card p {
            margin: 0.25rem 0;
            font-size: 0.9rem;
            color: var(--text-secondary);
        }
        .card-footer {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-top: 1rem;
            font-size: 0.8rem;
            color: var(--text-secondary);
        }
        .card-footer .date {
            font-weight: bold;
        }
        .card-footer .actions {
            display: flex;
            gap: 0.5rem;
        }
        .btn-edit {
            background-color: var(--bg-tertiary);
            color: var(--text-primary);
            border: 1px solid var(--border-color);
        }
        .btn-edit:hover {
            background-color: var(--btn-edit-hover-bg);
        }
        /* Modal Styles */
        .modal-overlay {
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background: rgba(0, 0, 0, 0.6);
            display: flex;
            align-items: center;
            justify-content: center;
            z-index: 1000;
            transition: opacity 0.3s ease;
        }
        .modal-content {
            background: var(--bg-secondary);
            border-radius: 10px;
            width: 90%;
            max-width: 700px;
            box-shadow: 0 10px 30px var(--shadow-color);
            display: flex;
            flex-direction: column;
            max-height: 90vh;
            opacity: 0;
            margin-top: -20px;
            transform: scale(1); /* Emp√™che les conflits de superposition */
            transition: opacity 0.3s ease, margin-top 0.3s ease;
        }
        .modal-overlay.visible .modal-content {
            opacity: 1;
            margin-top: 0;
        }
        .modal-header {
            padding: 1rem 1.5rem;
            border-bottom: 1px solid var(--border-color);
            display: flex;
            justify-content: space-between;
            align-items: center;
        }
        .modal-header h3 { margin: 0; }
        .modal-close {
            background: none; border: none; font-size: 1.8rem; cursor: pointer;
            color: var(--text-secondary); padding: 0; line-height: 1;
        }
        .modal-body { padding: 1.5rem; overflow-y: auto; }
        .modal-body .form-group label { font-weight: bold; margin-bottom: 0.5rem; display: block; }
        .modal-body textarea {
            width: 100%; padding: 0.75rem; border: 2px solid var(--border-color);
            border-radius: 5px; font-size: 1rem; resize: vertical; min-height: 120px;
            background-color: var(--bg-primary); color: var(--text-primary);
        }
        .modal-footer {
            padding: 1rem 1.5rem; border-top: 1px solid var(--border-color);
            display: flex; justify-content: flex-end; gap: 1rem;
        }
        .error-message {
            background: #f8d7da;
            color: #721c24;
            padding: 1rem;
            border-radius: 5px;
            margin-bottom: 1.5rem;
        }
        /* Quill editor styles */
        /* Correction pour que les pop-ups de Quill (lien, tableau) apparaissent au-dessus de la modale */
        .ql-tooltip {
            z-index: 1001 !important;
        }
        .ql-toolbar.ql-snow {
            border: 2px solid var(--border-color);
            border-bottom: 0;
            border-top-left-radius: 5px;
            border-top-right-radius: 5px;
            background: var(--bg-tertiary);
        }
        .ql-container.ql-snow {
            border: 2px solid var(--border-color);
            border-bottom-left-radius: 5px;
            border-bottom-right-radius: 5px;
            background: var(--bg-secondary);
            color: var(--text-primary);
            font-family: inherit;
            font-size: 1rem;
        }
        .ql-editor {
            min-height: 150px; /* Hauteur par d√©faut */
        }
        #modal-bilan-editor .ql-editor {
            min-height: 250px; /* Plus de place pour le bilan */
        }
        #modal-suite-editor .ql-editor {
            min-height: 120px; /* Moins de place pour la suite √† donner */
        }
    </style>
</head>
<body>
    <%- include('../partials/navbar', { user: user, page: 'kanban' }) %>

    <div class="container">
        <% if (error) { %>
            <div class="error-message"><%= error %></div>
        <% } %>

        <div class="kanban-board">
            <% if (columnOrder && columnOrder.length > 0) { %>
                <% columnOrder.forEach(columnTitle => { %>
                    <% const tasks = kanbanData[columnTitle] || []; %>
                    <div class="kanban-column" data-column-title="<%= columnTitle %>">
                        <div class="kanban-column-header">
                            <h3><%= columnTitle %></h3>
                            <span class="count"><%= tasks.length %></span>
                        </div>
                        <div class="kanban-cards">
                            <% tasks.forEach(p => { %>
                                <div class="kanban-card" data-card-id="<%= p.ID %>">
                                    <h4><%= p.Activite ? p.Activite.Nom : 'Activit√© non d√©finie' %></h4>
                                    <p><strong>Ouvrage:</strong> <%= p.Ouvrage ? p.Ouvrage.Nom : 'N/A' %></p>
                                    <p><strong>Agent:</strong> <%= p.Employe ? p.Employe.Surnom : 'N/A' %></p>
                                    <div class="card-footer">
                                        <span class="date"><%= new Date(p.Date).toLocaleDateString('fr-FR') %></span>
                                        <div class="actions">
                                            <button type="button" class="btn btn-sm btn-edit btn-edit-modal" data-planning-id="<%= p.ID %>" data-focus="bilan">Bilan</button>
                                            <button type="button" class="btn btn-sm btn-edit btn-edit-modal" data-planning-id="<%= p.ID %>" data-focus="suite">Suite</button>
                                        </div>
                                    </div>
                                </div>
                            <% }) %>
                        </div>
                    </div>
                <% }) %>
            <% } else { %>
                <p>Aucun planning √† afficher dans le kanban.</p>
            <% } %>
        </div>
    </div>

    <!-- Modal for Bilan/Suite -->
    <div id="details-modal" class="modal-overlay" style="display: none;">
        <div class="modal-content">
            <div class="modal-header">
                <h3 id="modal-title">Modifier le Bilan / Suite √† donner</h3>
                <button type="button" class="modal-close">&times;</button>
            </div>
            <div class="modal-body">
                <div id="modal-loader" style="text-align: center; padding: 2rem;">Chargement...</div>
                <form id="modal-form" style="display: none;">
                    <input type="hidden" id="modal-planning-id" name="planningId">
                    <div class="form-group">
                        <label for="modal-bilan-editor">üìù Bilan de l'intervention</label>
                        <div id="modal-bilan-editor"></div>
                        <textarea id="modal-bilan-text" name="Bilan" style="display:none;"></textarea>
                    </div>
                    <div class="form-group" style="margin-top: 1rem;">
                        <label for="modal-suite-editor">‚û°Ô∏è Suite √† donner</label>
                        <div id="modal-suite-editor"></div>
                        <textarea id="modal-suite-text" name="SuiteADonner" style="display:none;"></textarea>
                    </div>
                    <div id="modal-error" class="error-message" style="display: none; margin-top: 1rem;"></div>
                </form>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary modal-close">Annuler</button>
                <button type="submit" form="modal-form" class="btn btn-primary">Enregistrer</button>
            </div>
        </div>
    </div>

    <script src="https://cdn.jsdelivr.net/npm/quill@2.0.2/dist/quill.js"></script>
    <script src="https://unpkg.com/quill-better-table@1.2.10/dist/quill-better-table.js"></script>

    <script>
        document.addEventListener('DOMContentLoaded', function() {
            const themeColors = ['#667eea', '#764ba2', '#8e44ad', '#2980b9', '#2c3e50', '#16a085'];
            
            // Simple hash function to get a color index
            function getColorIndex(str) {
                let hash = 0;
                for (let i = 0; i < str.length; i++) {
                    hash = str.charCodeAt(i) + ((hash << 5) - hash);
                }
                return Math.abs(hash % themeColors.length);
            }

            const columns = document.querySelectorAll('.kanban-column');
            columns.forEach(column => {
                const title = column.dataset.columnTitle;
                const color = themeColors[getColorIndex(title)];
                
                const header = column.querySelector('.kanban-column-header');
                if (header) {
                    header.style.borderColor = color;
                }

                const cards = column.querySelectorAll('.kanban-card');
                cards.forEach(card => {
                    card.style.borderLeftColor = color;
                });
            });

            // --- Modal Logic ---
            const modal = document.getElementById('details-modal');
            const modalLoader = document.getElementById('modal-loader');
            const modalForm = document.getElementById('modal-form');
            const modalError = document.getElementById('modal-error');
            const planningIdInput = document.getElementById('modal-planning-id');
            
            const bilanEditorDiv = document.getElementById('modal-bilan-editor');
            const suiteEditorDiv = document.getElementById('modal-suite-editor');
            const bilanTextarea = document.getElementById('modal-bilan-text');
            const suiteTextarea = document.getElementById('modal-suite-text');

            // Enregistrer les modules Quill une seule fois au chargement de la page
            Quill.register({ 'modules/better-table': quillBetterTable }, true);

            let quillBilan = null;
            let quillSuite = null;

            const initializeQuill = () => {
                const quillOptions = {
                    theme: 'snow',
                    // Correction pour que les pop-ups de Quill s'affichent au-dessus de tout
                    bounds: document.body,
                    modules: {
                        table: false, // disable default table module
                        'better-table': {
                            operationMenu: {
                                items: {
                                    unmergeCell: { text: 'D√©-fusionner' },
                                    mergeCells: { text: 'Fusionner' },
                                    deleteRow: { text: 'Supprimer ligne' },
                                    deleteColumn: { text: 'Supprimer colonne' },
                                    insertRowAbove: { text: 'Ins√©rer ligne avant' },
                                    insertRowBelow: { text: 'Ins√©rer ligne apr√®s' },
                                    insertColumnLeft: { text: 'Ins√©rer colonne √† gauche' },
                                    insertColumnRight: { text: 'Ins√©rer colonne √† droite' },
                                },
                                color: {
                                    colors: ['#fff', '#000', '#28a745', '#ffc107', '#dc3545'],
                                    text: 'Couleur de fond'
                                }
                            }
                        },
                        keyboard: {
                            bindings: quillBetterTable.keyboardBindings
                        },
                        toolbar: [
                            [{ 'header': [1, 2, 3, false] }],
                            ['bold', 'italic', 'underline', 'strike'],
                            [{ 'list': 'ordered'}, { 'list': 'bullet' }],
                            [{ 'color': [] }, { 'background': [] }],
                            ['link'],
                            ['clean']
                        ]
                    }
                };

                // Add table button to toolbar
                quillOptions.modules.toolbar.push([{ 'table': 'new' }]);

                quillBilan = new Quill(bilanEditorDiv, quillOptions);
                quillSuite = new Quill(suiteEditorDiv, quillOptions);
            };

            const destroyQuill = () => {
                quillBilan = null;
                quillSuite = null;
                // Clean up the DOM elements created by Quill
                bilanEditorDiv.innerHTML = '';
                suiteEditorDiv.innerHTML = '';
                const toolbars = modal.querySelectorAll('.ql-toolbar');
                toolbars.forEach(tb => tb.remove());
                const containers = modal.querySelectorAll('.ql-container');
                containers.forEach(c => c.classList.remove('ql-container', 'ql-snow'));
            };

            const openModal = async (planningId, focusOn) => {
                modal.style.display = 'flex';
                setTimeout(() => modal.classList.add('visible'), 10);
                modalForm.style.display = 'none';
                modalLoader.style.display = 'block';
                modalError.style.display = 'none';
                
                planningIdInput.value = planningId;

                initializeQuill();

                try {
                    const response = await fetch(`/api/plannings/${planningId}/details`, {
                        cache: 'no-cache' // Emp√™che la mise en cache de la r√©ponse
                    });
                    if (!response.ok) throw new Error('Erreur de chargement des donn√©es.');
                    
                    const data = await response.json();
                    if (!data.success) throw new Error(data.error || 'Erreur de chargement.');

                    // Utiliser la m√©thode robuste pour charger le contenu HTML
                    quillBilan.setContents(quillBilan.clipboard.convert(data.Bilan || ''));
                    quillSuite.setContents(quillSuite.clipboard.convert(data.SuiteADonner || ''));

                    modalLoader.style.display = 'none';
                    modalForm.style.display = 'block';

                    const editorToFocus = focusOn === 'bilan' ? quillBilan : quillSuite;
                    editorToFocus.focus();

                } catch (err) {
                    modalLoader.style.display = 'none';
                    modalError.textContent = err.message;
                    modalError.style.display = 'block';
                    destroyQuill();
                }
            };

            const closeModal = () => {
                modal.classList.remove('visible');
                setTimeout(() => {
                    modal.style.display = 'none';
                    destroyQuill();
                }, 300);
            };

            document.querySelectorAll('.btn-edit-modal').forEach(button => {
                button.addEventListener('click', (e) => {
                    const planningId = e.currentTarget.dataset.planningId;
                    const focusOn = e.currentTarget.dataset.focus;
                    openModal(planningId, focusOn);
                });
            });

            document.querySelectorAll('.modal-close').forEach(button => {
                button.addEventListener('click', closeModal);
            });

            modal.addEventListener('click', (e) => {
                if (e.target === modal) closeModal();
            });

            modalForm.addEventListener('submit', async (e) => {
                e.preventDefault();

                bilanTextarea.value = quillBilan.root.innerHTML;
                suiteTextarea.value = quillSuite.root.innerHTML;

                const planningId = planningIdInput.value;
                const submitButton = modal.querySelector('button[type="submit"]');
                const originalButtonText = submitButton.textContent;

                submitButton.textContent = 'Enregistrement...';
                submitButton.disabled = true;
                modalError.style.display = 'none';

                try {
                    const response = await fetch(`/plannings/${planningId}/details`, {
                        method: 'PUT',
                        headers: { 'Content-Type': 'application/json', 'Accept': 'application/json' },
                        body: JSON.stringify({ Bilan: bilanTextarea.value, SuiteADonner: suiteTextarea.value })
                    });

                    if (!response.ok) {
                        const errData = await response.json();
                        throw new Error(errData.error || 'Erreur lors de la sauvegarde.');
                    }
                    closeModal();
                } catch (err) {
                    modalError.textContent = err.message;
                    modalError.style.display = 'block';
                } finally {
                    submitButton.textContent = originalButtonText;
                    submitButton.disabled = false;
                }
            });
        });
    </script>
</body>
</html>