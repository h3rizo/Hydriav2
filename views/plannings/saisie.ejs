<!DOCTYPE html>
<html lang="fr">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Saisie Planning - Soakoja</title>
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css">
    <script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
    
    <style>
        /* CSS Variables for Theme Switching */
        :root {
          /* Dark Purple Theme (Default) */
          --primary-color: #8B5CF6;
          --primary-dark: #6D28D9;
          --primary-light: #A78BFA;
          --secondary-color: #EC4899;
          --accent-color: #F59E0B;

          /* Glass morphism colors - Dark */
          --glass-bg: rgba(15, 12, 41, 0.7);
          --glass-border: rgba(139, 92, 246, 0.3);
          --glass-shadow: rgba(139, 92, 246, 0.4);

          /* Dark Background */
          --bg-primary: linear-gradient(135deg, #0F0C29 0%, #1A1441 25%, #24174C 75%, #2D1F57 100%);
          --bg-secondary: rgba(15, 12, 41, 0.9);
          --bg-card: rgba(15, 12, 41, 0.6);

          /* Text colors */
          --text-primary: #FFFFFF;
          --text-secondary: #E2E8F0;
          --text-muted: #94A3B8;
          --text-inverse: #1E293B;

          /* UI Elements */
          --navbar-height: 70px;
          --border-radius: 16px;
          --blur-amount: 20px;
        }

        /* Light Theme Variables */
        [data-theme="light"] {
          --primary-color: #7C3AED;
          --primary-dark: #5B21B6;
          --primary-light: #A855F7;

          --glass-bg: rgba(124, 58, 237, 0.05);
          --glass-border: rgba(124, 58, 237, 0.15);
          --glass-shadow: rgba(124, 58, 237, 0.1);

          --bg-primary: linear-gradient(135deg, #F8FAFC 0%, #E2E8F0 25%, #CBD5E1 75%, #94A3B8 100%);
          --bg-secondary: rgba(248, 250, 252, 0.9);
          --bg-card: rgba(255, 255, 255, 0.7);

          --text-primary: #1E293B;
          --text-secondary: #475569;
          --text-muted: #64748B;
          --text-inverse: #FFFFFF;
        }

        /* Global Styles */
        * {
          margin: 0;
          padding: 0;
          box-sizing: border-box;
        }

        body {
          font-family: 'Inter', 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
          background: var(--bg-primary);
          background-attachment: fixed;
          color: var(--text-primary);
          line-height: 1.6;
          min-height: 100vh;
          overflow-x: hidden;
        }

        /* Header */
        .navbar {
          position: fixed;
          top: 0;
          left: 0;
          right: 0;
          height: var(--navbar-height);
          background: rgba(15, 12, 41, 0.95);
          backdrop-filter: blur(var(--blur-amount));
          border-bottom: 2px solid var(--glass-border);
          padding: 0 2rem;
          display: flex;
          justify-content: space-between;
          align-items: center;
          z-index: 100;
          box-shadow: 0 8px 32px var(--glass-shadow);
        }

        [data-theme="light"] .navbar {
          background: rgba(248, 250, 252, 0.95);
        }

        .nav-brand h2 {
          font-size: 1.8rem;
          font-weight: 700;
          background: linear-gradient(135deg, var(--primary-color), var(--secondary-color));
          -webkit-background-clip: text;
          -webkit-text-fill-color: transparent;
          background-clip: text;
        }

        .nav-user {
          display: flex;
          align-items: center;
          gap: 1.5rem;
          color: var(--text-secondary);
        }

        /* Theme Switcher */
        .theme-switcher {
          background: var(--glass-bg);
          backdrop-filter: blur(var(--blur-amount));
          border: 1px solid var(--glass-border);
          border-radius: 50px;
          padding: 12px 16px;
          cursor: pointer;
          transition: all 0.3s ease;
          box-shadow: 0 8px 32px var(--glass-shadow);
          margin-right: 1rem;
        }

        .theme-switcher:hover {
          transform: scale(1.1);
          box-shadow: 0 12px 48px var(--glass-shadow);
        }

        .theme-switcher .theme-icon {
          font-size: 18px;
          color: var(--text-primary);
          transition: all 0.3s ease;
        }

        /* Main Content */
        .main-content {
          padding-top: var(--navbar-height);
          min-height: 100vh;
        }

        .container {
          max-width: 1400px;
          margin: 0 auto;
          padding: 2rem;
        }

        /* Planning Interface */
        .planning-interface {
            background: var(--bg-card);
            backdrop-filter: blur(var(--blur-amount));
            border: 1px solid var(--glass-border);
            border-radius: var(--border-radius);
            overflow: hidden;
            box-shadow: 0 8px 32px var(--glass-shadow);
            margin: 1rem 0;
        }

        .interface-header {
            background: var(--glass-bg);
            padding: 1rem 1.5rem;
            border-bottom: 1px solid var(--glass-border);
            display: flex;
            justify-content: space-between;
            align-items: center;
        }

        .header-controls {
            display: flex;
            gap: 1rem;
            align-items: center;
            flex-wrap: wrap;
        }

        .filter-input {
            background: var(--glass-bg);
            border: 1px solid var(--glass-border);
            border-radius: 8px;
            padding: 0.5rem 1rem;
            color: var(--text-primary);
            width: 200px;
            font-size: 0.9rem;
        }
        
        .filter-input:focus {
            outline: none;
            border-color: var(--primary-color);
            box-shadow: 0 0 0 2px rgba(139, 92, 246, 0.2);
        }

        /* Table Container */
        .table-container {
            width: 100%;
            overflow-x: auto;
            max-height: 600px;
            overflow-y: auto;
        }

        /* Planning Table */
        .planning-table {
            width: 100%;
            min-width: 1000px;
            border-collapse: collapse;
            font-size: 0.85rem;
        }

        .planning-table thead {
            position: sticky;
            top: 0;
            z-index: 10;
        }

        .planning-table th {
            background: var(--glass-bg);
            padding: 0.75rem 0.5rem;
            text-align: left;
            font-weight: 600;
            color: var(--text-primary);
            border: 1px solid var(--glass-border);
            white-space: nowrap;
            font-size: 0.8rem;
        }

        .planning-table td {
            padding: 0.5rem;
            border: 1px solid var(--glass-border);
            vertical-align: middle;
        }

        .planning-table tbody tr {
            background: transparent;
            transition: background-color 0.2s ease;
        }

        .planning-table tbody tr:hover {
            background: rgba(139, 92, 246, 0.1);
        }

        .planning-table tbody tr.selected {
            background: rgba(139, 92, 246, 0.2) !important;
            border-left: 3px solid var(--primary-color);
        }

        /* Cell content */
        .cell-input {
            background: var(--glass-bg);
            border: 1px solid var(--glass-border);
            color: var(--text-primary);
            width: 100%;
            padding: 0.25rem;
            font-size: inherit;
            font-family: inherit;
            border-radius: 4px;
        }

        .cell-input:focus {
            outline: 2px solid var(--primary-color);
            outline-offset: -2px;
            background: rgba(139, 92, 246, 0.1);
        }

        /* Select dropdowns - Theme-aware styling */
        select.cell-input {
            cursor: pointer;
        }

        select.cell-input option {
            background: var(--bg-card);
            color: var(--text-primary);
            padding: 0.5rem;
        }

        /* Dark theme select styling */
        [data-theme="dark"] select.cell-input {
            background: rgba(15, 12, 41, 0.8);
            color: #e2e8f0;
            border-color: rgba(139, 92, 246, 0.3);
        }

        [data-theme="dark"] select.cell-input:focus {
            background: rgba(15, 12, 41, 0.9);
            border-color: #8b5cf6;
        }

        [data-theme="dark"] select.cell-input option {
            background: #1e1b3a;
            color: #e2e8f0;
        }

        /* Light theme select styling */
        [data-theme="light"] select.cell-input {
            background: rgba(255, 255, 255, 0.9);
            color: #1f2937;
            border-color: rgba(124, 58, 237, 0.3);
        }

        [data-theme="light"] select.cell-input:focus {
            background: rgba(255, 255, 255, 1);
            border-color: #7c3aed;
        }

        [data-theme="light"] select.cell-input option {
            background: #ffffff;
            color: #1f2937;
        }

        /* Filter dropdowns styling */
        select.filter-input {
            background: var(--glass-bg);
            color: var(--text-primary);
            border: 1px solid var(--glass-border);
        }

        select.filter-input option {
            background: var(--bg-card);
            color: var(--text-primary);
        }

        /* Dark theme filter dropdowns */
        [data-theme="dark"] select.filter-input {
            background: rgba(15, 12, 41, 0.8);
            color: #e2e8f0;
            border-color: rgba(139, 92, 246, 0.3);
        }

        [data-theme="dark"] select.filter-input option {
            background: #1e1b3a;
            color: #e2e8f0;
        }

        /* Light theme filter dropdowns */
        [data-theme="light"] select.filter-input {
            background: rgba(255, 255, 255, 0.9);
            color: #1f2937;
            border-color: rgba(124, 58, 237, 0.3);
        }

        [data-theme="light"] select.filter-input option {
            background: #ffffff;
            color: #1f2937;
        }

        /* Date inputs */
        .cell-input[type="date"] {
            color-scheme: dark;
        }

        [data-theme="light"] .cell-input[type="date"] {
            color-scheme: light;
        }

        /* Detail indicator */
        .detail-indicator {
            display: inline-block;
            width: 20px;
            height: 20px;
            border-radius: 50%;
            text-align: center;
            line-height: 20px;
            font-size: 0.7rem;
            font-weight: bold;
            color: white;
            cursor: help;
        }

        .detail-indicator.has-details { 
            background: #10B981; 
        }
        
        .detail-indicator.no-details { 
            background: #6B7280; 
        }

        /* Status badges */
        .status-badge {
          display: inline-block;
          padding: 0.25rem 0.75rem;
          border-radius: 15px;
          font-size: 0.75rem;
          font-weight: 600;
          text-align: center;
        }

        .status-badge.validated {
          background: rgba(16, 185, 129, 0.2);
          color: #10B981;
          border: 1px solid rgba(16, 185, 129, 0.3);
        }

        .status-badge.pending {
          background: rgba(245, 158, 11, 0.2);
          color: #F59E0B;
          border: 1px solid rgba(245, 158, 11, 0.3);
        }

        /* Buttons */
        .btn {
          display: inline-block;
          padding: 0.5rem 1rem;
          background: linear-gradient(135deg, var(--primary-color), var(--primary-dark));
          color: var(--text-inverse);
          text-decoration: none;
          border-radius: 8px;
          border: none;
          font-size: 0.875rem;
          font-weight: 600;
          cursor: pointer;
          transition: all 0.3s ease;
          box-shadow: 0 4px 16px var(--glass-shadow);
        }

        .btn:hover {
          transform: translateY(-2px);
          box-shadow: 0 8px 32px var(--glass-shadow);
        }

        .btn-success {
          background: linear-gradient(135deg, #10B981, #059669);
        }

        .btn-info {
          background: linear-gradient(135deg, #3B82F6, #1D4ED8);
        }

        .btn-micro {
            padding: 0.25rem 0.5rem;
            font-size: 0.7rem;
            border: none;
            border-radius: 4px;
            cursor: pointer;
            transition: all 0.2s ease;
            margin: 0 2px;
        }

        .btn-delete { 
            background: rgba(239, 68, 68, 0.3); 
            color: #EF4444; 
        }

        /* Summary bar */
        .summary-bar {
            background: var(--glass-bg);
            padding: 0.75rem 1.5rem;
            border-top: 1px solid var(--glass-border);
            display: flex;
            justify-content: space-between;
            align-items: center;
            font-size: 0.85rem;
            color: var(--text-secondary);
        }

        /* Alert styles */
        .alert {
            background: var(--glass-bg);
            backdrop-filter: blur(var(--blur-amount));
            border: 1px solid var(--glass-border);
            border-radius: var(--border-radius);
            padding: 1rem 1.5rem;
            margin-bottom: 2rem;
            box-shadow: 0 4px 16px var(--glass-shadow);
        }

        .alert-success {
            border-color: rgba(16, 185, 129, 0.3);
            background: rgba(16, 185, 129, 0.1);
            color: #10B981;
        }

        .alert-danger {
            border-color: rgba(239, 68, 68, 0.3);
            background: rgba(239, 68, 68, 0.1);
            color: #EF4444;
        }

        /* Details Section */
        .details-section {
            margin-top: 1rem;
            background: var(--glass-bg);
            border: 1px solid var(--glass-border);
            border-radius: 12px;
            backdrop-filter: blur(20px);
            overflow: hidden;
            animation: slideDown 0.3s ease-out;
        }

        @keyframes slideDown {
            from { 
                opacity: 0; 
                transform: translateY(-10px); 
            }
            to { 
                opacity: 1; 
                transform: translateY(0); 
            }
        }

        .details-header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            padding: 1rem 1.5rem;
            border-bottom: 1px solid var(--glass-border);
            background: rgba(139, 92, 246, 0.1);
        }

        .details-header h4 {
            margin: 0;
            color: var(--text-primary);
            font-size: 1.1rem;
        }

        .details-controls {
            display: flex;
            gap: 0.5rem;
        }

        .details-table {
            width: 100%;
            border-collapse: collapse;
            font-size: 0.85rem;
        }

        .details-table th {
            background: var(--glass-bg);
            padding: 0.75rem;
            text-align: left;
            font-weight: 600;
            color: var(--text-primary);
            border-bottom: 1px solid var(--glass-border);
            font-size: 0.8rem;
        }

        .details-table td {
            padding: 0.5rem 0.75rem;
            border-bottom: 1px solid rgba(255,255,255,0.05);
            color: var(--text-secondary);
        }

        .empty-state {
            text-align: center;
            padding: 2rem;
            color: var(--text-muted);
        }

        /* Form controls for details */
        .form-control {
            background: var(--glass-bg);
            border: 1px solid var(--glass-border);
            border-radius: 4px;
            padding: 0.375rem 0.75rem;
            color: var(--text-primary);
            font-size: 0.875rem;
            width: 100%;
        }
        
        .form-control:focus {
            outline: none;
            border-color: var(--primary-color);
            box-shadow: 0 0 0 2px rgba(139, 92, 246, 0.2);
        }

        /* Responsive */
        @media (max-width: 768px) {
            .header-controls {
                flex-direction: column;
                align-items: stretch;
            }
            
            .filter-input {
                width: 100%;
            }
            
            .planning-table {
                min-width: 800px;
            }
        }
    </style>
</head>
<body data-theme="dark">
         <!-- Navigation Bar -->
     <nav class="navbar">
         <div class="nav-brand">
             <h2>💧 Soakoja - Saisie Planning</h2>
         </div>
         <div class="nav-user">
             <a href="/dashboard" class="btn btn-info" style="margin-right: 1rem; text-decoration: none;">
                 <i class="fas fa-home"></i> Accueil
             </a>
             <button class="theme-switcher" onclick="toggleTheme()" title="Changer de thème">
                 <i class="fas fa-sun theme-icon" id="theme-icon"></i>
             </button>
             <div class="user-info" style="display: flex; align-items: center; gap: 1rem; margin-left: 1rem;">
                 <span><strong><%= user.Surnom || user.Nom %></strong></span>
                 <span style="font-size: 0.9rem; opacity: 0.8;"><%= user.Poste || 'Employé' %></span>
                 <span style="font-size: 0.8rem; opacity: 0.7;">Niveau: <%= user.niveauMenu || 1 %></span>
                 <span style="font-size: 0.8rem; opacity: 0.7;"><%= user.Base || 'Base principale' %></span>
             </div>
             <a href="/logout" style="color: var(--text-secondary); text-decoration: none; margin-left: 1rem;">
                 <i class="fas fa-sign-out-alt"></i>
             </a>
         </div>
     </nav>
    
    <div class="main-content">
        <div class="container">
            <!-- Messages d'alerte -->
            <div class="alert alert-success" style="display: none;" id="successAlert">
                Planning créé avec succès !
            </div>
            <div class="alert alert-danger" style="display: none;" id="errorAlert">
                Erreur lors de l'opération
            </div>

            <div class="planning-interface">
                                 <div class="interface-header">
                     <h3><i class="fas fa-table"></i> Planification - Vue Tableur</h3>
                     <div class="header-controls">
                         <div class="auto-save-indicator" style="display: flex; align-items: center; gap: 0.5rem; font-size: 0.8rem; color: var(--text-muted);">
                             <i class="fas fa-save"></i>
                             <span>Sauvegarde automatique activée</span>
                         </div>
                                                 <select id="employeeFilter" class="filter-input">
                             <option value="">-- Tous les employés --</option>
                             <% employes.forEach(emp => { %>
                                 <option value="<%= emp.ID %>"><%= emp.Surnom || emp.Nom %></option>
                             <% }); %>
                         </select>
                        <select id="monthFilter" class="filter-input">
                            <option value="">-- Tous les mois --</option>
                            <option value="2024-01">Janvier 2024</option>
                            <option value="2024-02">Février 2024</option>
                            <option value="2024-03">Mars 2024</option>
                        </select>
                        <input type="text" id="searchFilter" class="filter-input" placeholder="Rechercher...">
                        <button id="addRowBtn" class="btn btn-success">
                            <i class="fas fa-plus"></i> Ajouter
                        </button>
                        <button id="exportBtn" class="btn btn-info">
                            <i class="fas fa-download"></i> Export
                        </button>
                    </div>
                </div>

                <div class="table-container">
                    <table class="planning-table">
                        <thead>
                            <tr>
                                <th style="width: 60px;">Détails</th>
                                <th style="width: 120px;">Date</th>
                                <th style="width: 140px;">Employé</th>
                                <th style="width: 140px;">Ouvrage</th>
                                <th style="width: 140px;">Activité</th>
                                <th style="width: 200px;">Remarques</th>
                                <th style="width: 100px;">Statut</th>
                                <th style="width: 80px;">Actions</th>
                            </tr>
                        </thead>
                        <tbody id="planningTableBody">
                            <% if (plannings && plannings.length > 0) { %>
                                <% plannings.forEach(planning => { %>
                                    <tr data-id="<%= planning.ID %>" class="planning-row" onclick="selectPlanning(<%= planning.ID %>)">
                                        <td>
                                            <span class="detail-indicator no-details" title="Aucun détail">◯</span>
                                        </td>
                                        <td>
                                            <input type="date" class="cell-input" value="<%= planning.Date ? planning.Date.toISOString().split('T')[0] : '' %>">
                                        </td>
                                                                                 <td>
                                             <select class="cell-input" data-employee="<%= planning.EmployeID %>">
                                                 <% employes.forEach(emp => { %>
                                                     <option value="<%= emp.ID %>" <%= emp.ID === planning.EmployeID ? 'selected' : '' %>>
                                                         <%= emp.Surnom || emp.Nom %>
                                                     </option>
                                                 <% }); %>
                                             </select>
                                         </td>
                                        <td>
                                            <select class="cell-input">
                                                <option value="">-- Sélectionner --</option>
                                                <% ouvrages.forEach(ouv => { %>
                                                    <option value="<%= ouv.ID %>" <%= ouv.ID === planning.OuvrageID ? 'selected' : '' %>>
                                                        <%= ouv.Nom %>
                                                    </option>
                                                <% }); %>
                                            </select>
                                        </td>
                                        <td>
                                            <select class="cell-input">
                                                <% activites.forEach(act => { %>
                                                    <option value="<%= act.ID %>" <%= act.ID === planning.ActiviteID ? 'selected' : '' %>>
                                                        <%= act.Nom %>
                                                    </option>
                                                <% }); %>
                                            </select>
                                        </td>
                                        <td>
                                            <input type="text" class="cell-input" value="<%= planning.Remarque || '' %>" placeholder="Remarques...">
                                        </td>
                                        <td>
                                            <span class="status-badge <%= planning.EstValide ? 'validated' : 'pending' %>">
                                                <%= planning.EstValide ? 'Validé' : 'En attente' %>
                                            </span>
                                        </td>
                                        <td>
                                            <button class="btn-micro btn-delete" onclick="deleteRow(<%= planning.ID %>)" title="Supprimer">
                                                <i class="fas fa-trash"></i>
                                            </button>
                                        </td>
                                    </tr>
                                <% }); %>
                            <% } else { %>
                                <tr>
                                    <td colspan="8" class="text-center text-muted">
                                        <i class="fas fa-info-circle"></i> Aucun planning trouvé
                                    </td>
                                </tr>
                            <% } %>
                        </tbody>
                    </table>
                </div>

                <div class="summary-bar">
                    <div>
                        <strong>Total:</strong> <span id="totalCount"><%= plannings ? plannings.length : 0 %></span> plannings
                        | <strong>Validés:</strong> <span id="validatedCount"><%= plannings ? plannings.filter(p => p.EstValide).length : 0 %></span>
                        | <strong>En attente:</strong> <span id="pendingCount"><%= plannings ? plannings.filter(p => !p.EstValide).length : 0 %></span>
                    </div>
                    <div id="statusMessage">
                        <strong>Dernière mise à jour:</strong> <span id="lastUpdate"></span>
                    </div>
                </div>
            </div>

            <!-- Planning Details Section -->
            <div id="planningDetailsSection" class="details-section" style="display: none;">
                <div class="details-header">
                    <h4><i class="fas fa-list-ul"></i> Détails du planning <span id="selectedPlanningId"></span></h4>
                    <div class="details-controls">
                        <button id="addDetailBtn" class="btn btn-success">
                            <i class="fas fa-plus"></i> Ajouter détail
                        </button>
                        <button id="closeDetailsBtn" class="btn btn-info">
                            <i class="fas fa-times"></i> Fermer
                        </button>
                    </div>
                </div>
                
                <div class="table-container">
                    <table class="details-table">
                        <thead>
                            <tr>
                                <th>Ouvrage Constitutif</th>
                                <th>Désignation</th>
                                <th>Quantité</th>
                                <th>Prix Unitaire</th>
                                <th>Montant</th>
                                <th>Acheteur</th>
                                <th>Actions</th>
                            </tr>
                        </thead>
                        <tbody id="planningDetailsBody"></tbody>
                    </table>
                </div>
            </div>
        </div>
    </div>

<script>
    let currentSelectedPlanning = null;
    let saveTimeout = null;

    // Initialize on page load
    document.addEventListener('DOMContentLoaded', function() {
        console.log('🚀 Initialisation de la page de saisie planning');
        initializeTheme();
        updateLastUpdate();
        setupEventHandlers();
        
        // Tester la route de sauvegarde après un court délai
        setTimeout(testSaveRoute, 1000);
    });

    // Theme management
    function initializeTheme() {
        const savedTheme = localStorage.getItem('theme') || 'dark';
        document.documentElement.setAttribute('data-theme', savedTheme);
        document.body.setAttribute('data-theme', savedTheme);
        updateThemeIcon(savedTheme);
        updateColorScheme(savedTheme);
    }

    function updateThemeIcon(theme) {
        const icon = document.getElementById('theme-icon');
        if (icon) {
            icon.className = theme === 'light' ? 'fas fa-moon theme-icon' : 'fas fa-sun theme-icon';
        }
    }

    function updateColorScheme(theme) {
        document.documentElement.style.colorScheme = theme;
    }

    function toggleTheme() {
        const currentTheme = document.documentElement.getAttribute('data-theme') || 'dark';
        const newTheme = currentTheme === 'light' ? 'dark' : 'light';
        
        document.documentElement.setAttribute('data-theme', newTheme);
        document.body.setAttribute('data-theme', newTheme);
        localStorage.setItem('theme', newTheme);
        updateThemeIcon(newTheme);
        updateColorScheme(newTheme);
    }

    // Event handlers
    function setupEventHandlers() {
        console.log('📡 Configuration des gestionnaires d\'événements');
        
        // Employee filter
        document.getElementById('employeeFilter').addEventListener('change', function() {
            filterByEmployee(this.value);
        });

        // Month filter
        document.getElementById('monthFilter').addEventListener('change', function() {
            filterByMonth(this.value);
        });

        // Search filter
        document.getElementById('searchFilter').addEventListener('input', function() {
            filterBySearch(this.value);
        });

        // Close details
        document.getElementById('closeDetailsBtn').addEventListener('click', function() {
            closeDetailsSection();
        });

        // Add row and export buttons
        document.getElementById('addRowBtn').addEventListener('click', function() {
            console.log('📝 Fonction d\'ajout en développement');
        });

        document.getElementById('exportBtn').addEventListener('click', function() {
            console.log('📊 Export des données en cours...');
        });
        
        // Auto-save functionality for cell inputs
        setupAutoSave();
    }

    // Auto-save functionality avec debouncing amélioré
    function setupAutoSave() {
        console.log('💾 Configuration de la sauvegarde automatique');
        
        // Fonction de debouncing pour éviter trop d'appels
        function debouncedSave(planningId) {
            if (saveTimeout) {
                clearTimeout(saveTimeout);
            }
            
            saveTimeout = setTimeout(() => {
                savePlanningRow(planningId);
            }, 1000); // Attendre 1 seconde après la dernière modification
        }
        
        // Écouter les changements sur tous les inputs du tableau
        document.addEventListener('change', function(e) {
            if (e.target.classList.contains('cell-input')) {
                const row = e.target.closest('tr');
                if (row && row.dataset.id) {
                    console.log(`🔄 Changement détecté sur planning ${row.dataset.id}`);
                    debouncedSave(row.dataset.id);
                }
            }
        });
        
        // Écouter aussi les événements blur pour les champs texte
        document.addEventListener('blur', function(e) {
            if (e.target.classList.contains('cell-input') && e.target.type === 'text') {
                const row = e.target.closest('tr');
                if (row && row.dataset.id) {
                    console.log(`📤 Blur détecté sur planning ${row.dataset.id}`);
                    debouncedSave(row.dataset.id);
                }
            }
        }, true);
    }

    // Fonction de sauvegarde corrigée
    function savePlanningRow(planningId) {
        const row = document.querySelector(`tr[data-id="${planningId}"]`);
        if (!row) {
            console.error(`❌ Ligne planning introuvable pour ID: ${planningId}`);
            return;
        }
        
        console.log(`💾 Tentative de sauvegarde pour planning ID: ${planningId}`);
        
        // Sélecteurs corrigés pour récupérer les bonnes données
        const dateInput = row.querySelector('input[type="date"]');
        const employeeSelect = row.querySelector('select[data-employee]');
        const ouvrageSelect = row.querySelector('td:nth-child(4) select'); // 4ème colonne = Ouvrage
        const activiteSelect = row.querySelector('td:nth-child(5) select'); // 5ème colonne = Activité
        const remarqueInput = row.querySelector('td:nth-child(6) input[type="text"]'); // 6ème colonne = Remarques
        
        // Vérification que tous les éléments existent
        if (!dateInput || !employeeSelect || !ouvrageSelect || !activiteSelect || !remarqueInput) {
            console.error('❌ Éléments du formulaire introuvables:', {
                dateInput: !!dateInput,
                employeeSelect: !!employeeSelect,
                ouvrageSelect: !!ouvrageSelect,
                activiteSelect: !!activiteSelect,
                remarqueInput: !!remarqueInput
            });
            return;
        }
        
        // Collecte des données avec validation
        const planningData = {
            ID: parseInt(planningId),
            Date: dateInput.value || null,
            EmployeID: parseInt(employeeSelect.value) || null,
            OuvrageID: parseInt(ouvrageSelect.value) || null,
            ActiviteID: parseInt(activiteSelect.value) || null,
            Remarque: remarqueInput.value || null
        };
        
        console.log('📋 Données à sauvegarder:', planningData);
        
        // Validation basique
        if (!planningData.Date || !planningData.EmployeID) {
            console.warn('⚠️ Données incomplètes - sauvegarde annulée');
            showVisualFeedback(row, 'warning');
            return;
        }
        
        // Indicateur de sauvegarde en cours
        showVisualFeedback(row, 'saving');
        
        // Appel AJAX avec gestion d'erreur améliorée
        fetch('/api/plannings/update', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
                'Accept': 'application/json'
            },
            body: JSON.stringify(planningData)
        })
        .then(response => {
            console.log('📡 Réponse serveur:', response.status, response.statusText);
            
            if (!response.ok) {
                throw new Error(`Erreur HTTP: ${response.status} ${response.statusText}`);
            }
            
            return response.json();
        })
        .then(data => {
            console.log('✅ Réponse JSON:', data);
            
            if (data.success) {
                console.log('🎉 Sauvegarde réussie');
                showVisualFeedback(row, 'success');
                updateLastUpdate();
            } else {
                console.error('❌ Erreur métier:', data.error || data.message);
                showVisualFeedback(row, 'error');
                
                // Afficher un message d'erreur à l'utilisateur
                if (data.error) {
                    showErrorAlert(`Erreur de sauvegarde: ${data.error}`);
                }
            }
        })
        .catch(error => {
            console.error('💥 Erreur complète:', error);
            showVisualFeedback(row, 'error');
            
            // Gestion spécifique des erreurs réseau
            if (error.name === 'TypeError' && error.message.includes('fetch')) {
                showErrorAlert('Erreur de connexion - vérifiez votre réseau');
            } else if (error.message.includes('404')) {
                showErrorAlert('Route de sauvegarde introuvable sur le serveur');
            } else {
                showErrorAlert(`Erreur de sauvegarde: ${error.message}`);
            }
        });
    }

    // Fonction pour afficher un feedback visuel amélioré
    function showVisualFeedback(row, type) {
        // Réinitialiser les styles précédents
        row.style.backgroundColor = '';
        row.style.borderLeft = '';
        
        switch (type) {
            case 'saving':
                row.style.backgroundColor = 'rgba(59, 130, 246, 0.1)'; // Bleu pour "en cours"
                row.style.borderLeft = '3px solid #3B82F6';
                break;
            case 'success':
                row.style.backgroundColor = 'rgba(16, 185, 129, 0.1)'; // Vert pour succès
                row.style.borderLeft = '3px solid #10B981';
                setTimeout(() => {
                    row.style.backgroundColor = '';
                    row.style.borderLeft = '';
                }, 2000);
                break;
            case 'error':
                row.style.backgroundColor = 'rgba(239, 68, 68, 0.1)'; // Rouge pour erreur
                row.style.borderLeft = '3px solid #EF4444';
                setTimeout(() => {
                    row.style.backgroundColor = '';
                    row.style.borderLeft = '';
                }, 3000);
                break;
            case 'warning':
                row.style.backgroundColor = 'rgba(245, 158, 11, 0.1)'; // Orange pour avertissement
                row.style.borderLeft = '3px solid #F59E0B';
                setTimeout(() => {
                    row.style.backgroundColor = '';
                    row.style.borderLeft = '';
                }, 2000);
                break;
        }
    }

    // Fonction pour afficher des messages d'erreur
    function showErrorAlert(message) {
        const errorAlert = document.getElementById('errorAlert');
        if (errorAlert) {
            errorAlert.textContent = message;
            errorAlert.style.display = 'block';
            
            setTimeout(() => {
                errorAlert.style.display = 'none';
            }, 5000);
        } else {
            // Fallback si l'alerte n'existe pas
            console.error('📢 Message d\'erreur:', message);
            alert(message); // Pas idéal mais fonctionnel
        }
    }

    // Test de connectivité à la route de sauvegarde
    function testSaveRoute() {
        console.log('🔍 Test de la route de sauvegarde...');
        
        fetch('/api/plannings/update', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({ test: true })
        })
        .then(response => {
            if (response.status === 404) {
                console.error('⚠️  PROBLÈME: Route /api/plannings/update introuvable (404)');
                console.log('Vérifiez que cette route est bien définie dans votre serveur');
            } else if (response.status === 500) {
                console.error('⚠️  PROBLÈME: Erreur serveur (500) sur la route de sauvegarde');
            } else {
                console.log('✅ Route de sauvegarde accessible');
            }
            return response.text();
        })
        .then(text => {
            console.log('📄 Réponse du test:', text);
        })
        .catch(error => {
            console.error('⚠️  PROBLÈME: Impossible de contacter la route de sauvegarde:', error);
        });
    }

    // Filter functions
    function filterByEmployee(employeeId) {
        const rows = document.querySelectorAll('.planning-row');
        let visibleCount = 0;
        
        rows.forEach(row => {
            const employeeSelect = row.querySelector('select[data-employee]');
            const rowEmployeeId = employeeSelect.getAttribute('data-employee');
            
            if (!employeeId || rowEmployeeId === employeeId) {
                row.style.display = '';
                visibleCount++;
            } else {
                row.style.display = 'none';
            }
        });
        
        updateCounters();
    }

    function filterByMonth(monthYear) {
        const rows = document.querySelectorAll('.planning-row');
        let visibleCount = 0;
        
        rows.forEach(row => {
            const dateInput = row.querySelector('input[type="date"]');
            const rowDate = dateInput.value;
            const rowMonthYear = rowDate.substring(0, 7);
            
            if (!monthYear || rowMonthYear === monthYear) {
                row.style.display = '';
                visibleCount++;
            } else {
                row.style.display = 'none';
            }
        });
        
        updateCounters();
    }

    function filterBySearch(searchText) {
        const rows = document.querySelectorAll('.planning-row');
        let visibleCount = 0;
        
        rows.forEach(row => {
            const text = row.textContent.toLowerCase();
            
            if (!searchText || text.includes(searchText.toLowerCase())) {
                row.style.display = '';
                visibleCount++;
            } else {
                row.style.display = 'none';
            }
        });
        
        updateCounters();
    }

    // Planning selection and details
    function selectPlanning(planningId) {
        // Remove previous selection
        document.querySelectorAll('.planning-row').forEach(row => {
            row.classList.remove('selected');
        });
        
        // Select current row
        const selectedRow = document.querySelector(`tr[data-id="${planningId}"]`);
        if (selectedRow) {
            selectedRow.classList.add('selected');
        }
        
        currentSelectedPlanning = planningId;
        showPlanningDetails(planningId);
    }

    function showPlanningDetails(planningId) {
        document.getElementById('selectedPlanningId').textContent = `#${planningId}`;
        document.getElementById('planningDetailsSection').style.display = 'block';
        
        // Simulate loading details
        setTimeout(() => {
            renderPlanningDetails(planningId);
        }, 500);
    }

    function renderPlanningDetails(planningId) {
        const tbody = document.getElementById('planningDetailsBody');
        
        // Mock designations
        const mockDesignations = [
            { ID: 1, Nom: 'Maintenance préventive' },
            { ID: 2, Nom: 'Remplacement de pièces' },
            { ID: 3, Nom: 'Installation équipement' },
            { ID: 4, Nom: 'Réparation d\'urgence' },
            { ID: 5, Nom: 'Contrôle qualité' }
        ];
        
        // Mock details
        const mockDetails = [
            {
                id: planningId * 10 + 1,
                ouvrageConstitutif: 'Pompe principale',
                designationID: 1,
                quantite: 1,
                prixUnitaire: 500.00,
                montant: 500.00,
                acheteur: 'Service Technique'
            },
            {
                id: planningId * 10 + 2,
                ouvrageConstitutif: 'Filtres',
                designationID: 2,
                quantite: 3,
                prixUnitaire: 75.00,
                montant: 225.00,
                acheteur: 'Service Maintenance'
            }
        ];
        
        let html = '';
        mockDetails.forEach(detail => {
            html += `
                <tr data-detail-id="${detail.id}">
                    <td>
                        <input type="text" class="form-control" 
                               value="${detail.ouvrageConstitutif}"
                               placeholder="Ouvrage constitutif...">
                    </td>
                    <td>
                        <select class="form-control">
                            <option value="">-- Désignation --</option>
                            ${mockDesignations.map(des => `
                                <option value="${des.ID}" ${detail.designationID == des.ID ? 'selected' : ''}>
                                    ${des.Nom}
                                </option>
                            `).join('')}
                        </select>
                    </td>
                    <td>
                        <input type="number" class="form-control quantity-input" 
                               value="${detail.quantite}"
                               step="0.01" min="0"
                               onchange="calculateAmount(this)">
                    </td>
                    <td>
                        <input type="number" class="form-control price-input" 
                               value="${detail.prixUnitaire}"
                               step="0.01" min="0"
                               onchange="calculateAmount(this)">
                    </td>
                    <td>
                        <input type="number" class="form-control amount-input" 
                               value="${detail.montant}"
                               step="0.01" readonly
                               style="background-color: var(--glass-bg); cursor: not-allowed;">
                    </td>
                    <td>
                        <select class="form-control">
                            <option value="">-- Acheteur --</option>
                            <option value="Service Technique" ${detail.acheteur === 'Service Technique' ? 'selected' : ''}>Service Technique</option>
                            <option value="Service Maintenance" ${detail.acheteur === 'Service Maintenance' ? 'selected' : ''}>Service Maintenance</option>
                            <option value="Service Administratif">Service Administratif</option>
                        </select>
                    </td>
                    <td>
                        <button class="btn-micro btn-delete" onclick="deleteDetail(${detail.id})" title="Supprimer">
                            <i class="fas fa-trash"></i>
                        </button>
                    </td>
                </tr>`;
        });
        
        tbody.innerHTML = html;
    }

    function closeDetailsSection() {
        document.getElementById('planningDetailsSection').style.display = 'none';
        document.querySelectorAll('.planning-row').forEach(row => {
            row.classList.remove('selected');
        });
        currentSelectedPlanning = null;
    }

    // Calculate amount (Quantity * Unit Price)
    function calculateAmount(element) {
        const row = element.closest('tr');
        const quantityInput = row.querySelector('.quantity-input');
        const priceInput = row.querySelector('.price-input');
        const amountInput = row.querySelector('.amount-input');
        
        if (quantityInput && priceInput && amountInput) {
            const quantity = parseFloat(quantityInput.value) || 0;
            const price = parseFloat(priceInput.value) || 0;
            const amount = quantity * price;
            
            amountInput.value = amount.toFixed(2);
            
            // Visual feedback
            amountInput.style.background = 'rgba(16, 185, 129, 0.2)';
            setTimeout(() => {
                amountInput.style.background = 'var(--glass-bg)';
            }, 1000);
        }
    }

    // Delete functions
    function deleteRow(planningId) {
        if (!confirm('Êtes-vous sûr de vouloir supprimer ce planning ?')) return;
        
        const row = document.querySelector(`tr[data-id="${planningId}"]`);
        if (row) {
            row.remove();
            
            if (currentSelectedPlanning === planningId) {
                closeDetailsSection();
            }
            
            updateCounters();
        }
    }

    function deleteDetail(detailId) {
        if (!confirm('Êtes-vous sûr de vouloir supprimer ce détail ?')) return;
        
        const row = document.querySelector(`tr[data-detail-id="${detailId}"]`);
        if (row) {
            row.remove();
        }
    }

    // Utility functions
    function updateCounters() {
        const visibleRows = document.querySelectorAll('.planning-row:not([style*="display: none"])');
        const totalCount = visibleRows.length;
        
        let validatedCount = 0;
        visibleRows.forEach(row => {
            const statusBadge = row.querySelector('.status-badge');
            if (statusBadge && statusBadge.classList.contains('validated')) {
                validatedCount++;
            }
        });
        
        const pendingCount = totalCount - validatedCount;
        
        document.getElementById('totalCount').textContent = totalCount;
        document.getElementById('validatedCount').textContent = validatedCount;
        document.getElementById('pendingCount').textContent = pendingCount;
    }

    function updateLastUpdate() {
        const now = new Date();
        const formatted = now.toLocaleString('fr-FR', {
            day: '2-digit',
            month: '2-digit', 
            year: 'numeric',
            hour: '2-digit',
            minute: '2-digit'
        });
        document.getElementById('lastUpdate').textContent = formatted;
    }

    function showSuccessMessage(message) {
        const alert = document.getElementById('successAlert');
        alert.textContent = message;
        alert.style.display = 'block';
        
        setTimeout(() => {
            alert.style.display = 'none';
        }, 3000);
    }
     
    // Make functions globally accessible
    window.toggleTheme = toggleTheme;
    window.selectPlanning = selectPlanning;
    window.deleteRow = deleteRow;
    window.deleteDetail = deleteDetail;
    window.calculateAmount = calculateAmount;
    window.savePlanningRow = savePlanningRow;
</script>
</body>
</html>