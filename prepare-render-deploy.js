/**
 * Script de pr√©paration au d√©ploiement sur Render
 * Ce script v√©rifie que toutes les configurations n√©cessaires sont en place
 * pour un d√©ploiement r√©ussi sur Render
 */

const fs = require('fs');
const path = require('path');
const { execSync } = require('child_process');

console.log('üöÄ Pr√©paration du d√©ploiement sur Render...');

// V√©rifier la pr√©sence des fichiers essentiels
const requiredFiles = [
  'package.json',
  'server.js',
  'render.yaml',
  '.env.example'
];

let allFilesPresent = true;

requiredFiles.forEach(file => {
  if (!fs.existsSync(file)) {
    console.error(`‚ùå Fichier manquant: ${file}`);
    allFilesPresent = false;
  } else {
    console.log(`‚úÖ Fichier pr√©sent: ${file}`);
  }
});

// V√©rifier la configuration de Git
try {
  const remoteUrl = execSync('git remote get-url origin').toString().trim();
  console.log(`‚úÖ D√©p√¥t Git configur√©: ${remoteUrl}`);
  
  // V√©rifier si le d√©p√¥t est sur GitHub
  if (remoteUrl.includes('github.com')) {
    console.log('‚úÖ D√©p√¥t h√©berg√© sur GitHub (compatible avec Render)');
  } else {
    console.warn('‚ö†Ô∏è Le d√©p√¥t n\'est pas sur GitHub. Render fonctionne mieux avec GitHub.');
  }
} catch (error) {
  console.error('‚ùå Erreur lors de la v√©rification de la configuration Git:', error.message);
}

// V√©rifier la pr√©sence des scripts dans package.json
try {
  const packageJson = JSON.parse(fs.readFileSync('package.json', 'utf8'));
  
  if (packageJson.scripts && packageJson.scripts.start) {
    console.log(`‚úÖ Script de d√©marrage trouv√©: ${packageJson.scripts.start}`);
  } else {
    console.error('‚ùå Script de d√©marrage manquant dans package.json');
    allFilesPresent = false;
  }
  
  // V√©rifier les d√©pendances essentielles
  const essentialDeps = ['express', 'dotenv', '@supabase/supabase-js'];
  const missingDeps = [];
  
  essentialDeps.forEach(dep => {
    if (!packageJson.dependencies || !packageJson.dependencies[dep]) {
      missingDeps.push(dep);
    }
  });
  
  if (missingDeps.length > 0) {
    console.warn(`‚ö†Ô∏è D√©pendances potentiellement manquantes: ${missingDeps.join(', ')}`);
  } else {
    console.log('‚úÖ Toutes les d√©pendances essentielles sont pr√©sentes');
  }
  
} catch (error) {
  console.error('‚ùå Erreur lors de la lecture de package.json:', error.message);
}

// V√©rifier la configuration des variables d'environnement
try {
  const envExample = fs.readFileSync('.env.example', 'utf8');
  const requiredEnvVars = ['SUPABASE_URL', 'SUPABASE_SERVICE_KEY'];
  const missingEnvVars = [];
  
  requiredEnvVars.forEach(envVar => {
    if (!envExample.includes(envVar)) {
      missingEnvVars.push(envVar);
    }
  });
  
  if (missingEnvVars.length > 0) {
    console.warn(`‚ö†Ô∏è Variables d'environnement manquantes dans .env.example: ${missingEnvVars.join(', ')}`);
  } else {
    console.log('‚úÖ Toutes les variables d\'environnement requises sont d√©finies dans .env.example');
  }
  
} catch (error) {
  console.error('‚ùå Erreur lors de la lecture de .env.example:', error.message);
}

// V√©rifier la configuration de render.yaml
try {
  const renderConfig = fs.readFileSync('render.yaml', 'utf8');
  
  if (renderConfig.includes('services:') && renderConfig.includes('startCommand:')) {
    console.log('‚úÖ Configuration Render valide d√©tect√©e');
  } else {
    console.warn('‚ö†Ô∏è La configuration Render pourrait √™tre incompl√®te');
  }
  
} catch (error) {
  console.error('‚ùå Erreur lors de la lecture de render.yaml:', error.message);
}

// R√©sum√©
if (allFilesPresent) {
  console.log('\n‚úÖ Le projet est pr√™t pour le d√©ploiement sur Render!');
  console.log('\nüìã Prochaines √©tapes:');
  console.log('1. Assurez-vous que tous vos changements sont commit√©s et pouss√©s vers GitHub');
  console.log('2. Connectez-vous √† Render et cr√©ez un nouveau service Web en pointant vers votre d√©p√¥t GitHub');
  console.log('3. Configurez les variables d\'environnement dans Render');
  console.log('4. Lancez le d√©ploiement');
} else {
  console.error('\n‚ùå Certains √©l√©ments sont manquants pour le d√©ploiement sur Render.');
  console.log('Veuillez corriger les probl√®mes signal√©s ci-dessus avant de d√©ployer.');
}