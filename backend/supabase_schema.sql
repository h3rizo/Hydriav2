-- =================================================================
-- Script PostgreSQL pour Supabase - Projet Soakoja (v2 - Case-Sensitive)
-- =================================================================
-- Ce script est adapté pour être exécuté dans l'éditeur SQL de Supabase.
-- Il utilise des guillemets doubles ("") pour préserver la casse des noms
-- de tables et de colonnes, assurant la compatibilité avec le code JS.

-- =============================================
-- 0. NETTOYAGE (Optionnel, mais recommandé pour une nouvelle installation)
-- =============================================
-- Exécutez ceci si vous avez des tables de la tentative précédente.
-- L'ordre est inversé pour respecter les contraintes de clé étrangère.

-- Supprimer les triggers d'abord
DO $$
DECLARE
    trg_rec RECORD;
BEGIN
    FOR trg_rec IN (SELECT trigger_name, event_object_table FROM information_schema.triggers WHERE trigger_schema = 'public' AND trigger_name LIKE 'update_%_updated_at')
    LOOP
        EXECUTE 'DROP TRIGGER IF EXISTS ' || quote_ident(trg_rec.trigger_name) || ' ON ' || quote_ident(trg_rec.event_object_table) || ' CASCADE;';
    END LOOP;
END $$;

DROP TABLE IF EXISTS "ActivitesPostes" CASCADE;
DROP TABLE IF EXISTS "CartesSociales" CASCADE;
DROP TABLE IF EXISTS "PointsEaus" CASCADE;
DROP TABLE IF EXISTS "CompteurTetes" CASCADE;
DROP TABLE IF EXISTS "TypesPointsEaus" CASCADE;
DROP TABLE IF EXISTS "PlanningsDetails" CASCADE;
DROP TABLE IF EXISTS "Plannings" CASCADE;
DROP TABLE IF EXISTS "Activites" CASCADE;
DROP TABLE IF EXISTS "TypesActivites" CASCADE;
DROP TABLE IF EXISTS "Gestionnaires" CASCADE;
DROP TABLE IF EXISTS "Magasins" CASCADE;
DROP TABLE IF EXISTS "Journaux" CASCADE;
DROP TABLE IF EXISTS "Comptes" CASCADE;
DROP TABLE IF EXISTS "Employes" CASCADE;
DROP TABLE IF EXISTS "Parcelles" CASCADE;
DROP TABLE IF EXISTS "Villages" CASCADE;
DROP TABLE IF EXISTS "Communes" CASCADE;
DROP TABLE IF EXISTS "Districts" CASCADE;
DROP TABLE IF EXISTS "Regions" CASCADE;
DROP TABLE IF EXISTS "Postes" CASCADE;
DROP TABLE IF EXISTS "Bases" CASCADE;
DROP TABLE IF EXISTS "Ouvrages" CASCADE;
DROP TABLE IF EXISTS "TypesOuvrages" CASCADE;
DROP TABLE IF EXISTS "Organisations" CASCADE;
-- Les tables manquantes du script original
DROP TABLE IF EXISTS "Designations" CASCADE;
DROP TABLE IF EXISTS "TypeDesignations" CASCADE;

-- Supprimer les types ENUM et la fonction trigger si elles existent
DROP TYPE IF EXISTS classe_admin_enum;
DROP TYPE IF EXISTS accessibilite_enum;
DROP TYPE IF EXISTS categorie_point_eau_enum;
DROP TYPE IF EXISTS modalite_paiement_enum;
DROP FUNCTION IF EXISTS update_updated_at_column();


-- =============================================
-- 1. FONCTION TRIGGER POUR `updatedAt`
-- =============================================
CREATE OR REPLACE FUNCTION update_updated_at_column()
RETURNS TRIGGER AS $$
BEGIN
   NEW."updatedAt" = now();
   RETURN NEW;
END;
$$ language 'plpgsql';


-- =============================================
-- 2. CRÉATION DES TYPES ENUM PERSONNALISÉS
-- =============================================
CREATE TYPE classe_admin_enum AS ENUM ('Village', 'Chef-lieu Fokontany', 'Chef-lieu Commune', 'Chef-lieu District', 'Chef-lieu Région');
CREATE TYPE accessibilite_enum AS ENUM ('Voiture', 'Moto', 'Pirogue', 'Pied');
CREATE TYPE categorie_point_eau_enum AS ENUM ('Public', 'Privé');
CREATE TYPE modalite_paiement_enum AS ENUM ('Au volume', 'Forfaitaire', 'Cotisation annuelle');


-- =============================================
-- 3. CRÉATION DES TABLES
-- =============================================

-- Organisations
CREATE TABLE "Organisations" (
    "ID" INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    "Nom" VARCHAR(255) NOT NULL,
    "Adresse" VARCHAR(255),
    "ComplementAdresse" VARCHAR(255),
    "CodePostal" VARCHAR(3),
    "Localite" INT,
    "NIF" VARCHAR(10),
    "STAT" VARCHAR(19),
    "NumeroCnaPS" VARCHAR(6),
    "Province" VARCHAR(50),
    "TarifDemandeBP" INT,
    "TarifMinimumBP" INT,
    "SalaireMinimal" REAL,
    "Telephone" VARCHAR(10),
    "mail" VARCHAR(255),
    "DeductionIRSA" INT,
    "createdAt" TIMESTAMPTZ NOT NULL DEFAULT now(),
    "updatedAt" TIMESTAMPTZ NOT NULL DEFAULT now()
);
CREATE TRIGGER update_organisations_updated_at BEFORE UPDATE ON "Organisations" FOR EACH ROW EXECUTE PROCEDURE update_updated_at_column();

-- TypesOuvrages
CREATE TABLE "TypesOuvrages" (
    "ID" INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    "NomType" VARCHAR(255) NOT NULL,
    "createdAt" TIMESTAMPTZ NOT NULL DEFAULT now(),
    "updatedAt" TIMESTAMPTZ NOT NULL DEFAULT now()
);
CREATE TRIGGER update_typesouvrages_updated_at BEFORE UPDATE ON "TypesOuvrages" FOR EACH ROW EXECUTE PROCEDURE update_updated_at_column();

-- Ouvrages
CREATE TABLE "Ouvrages" (
    "ID" INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    "Nom" VARCHAR(255) NOT NULL,
    "TypeOuvrageID" INT NOT NULL REFERENCES "TypesOuvrages"("ID") ON DELETE CASCADE ON UPDATE CASCADE,
    "AnneeRealisation" INT,
    "AnneeRealisationAvant" INT,
    "Intervenant" VARCHAR(255),
    "Remarque" TEXT,
    "IDXls" INT,
    "OrganisationID" INT NOT NULL REFERENCES "Organisations"("ID") ON DELETE CASCADE ON UPDATE CASCADE,
    "EstSaisonnier" BOOLEAN DEFAULT FALSE,
    "Photos" TEXT,
    "createdAt" TIMESTAMPTZ NOT NULL DEFAULT now(),
    "updatedAt" TIMESTAMPTZ NOT NULL DEFAULT now()
);
CREATE TRIGGER update_ouvrages_updated_at BEFORE UPDATE ON "Ouvrages" FOR EACH ROW EXECUTE PROCEDURE update_updated_at_column();

-- Bases
CREATE TABLE "Bases" (
    "ID" INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    "Nom" VARCHAR(255) NOT NULL,
    "OrganisationID" INT NOT NULL REFERENCES "Organisations"("ID") ON DELETE CASCADE ON UPDATE CASCADE,
    "OuvrageID" INT NOT NULL REFERENCES "Ouvrages"("ID") ON DELETE CASCADE ON UPDATE CASCADE,
    "Volet" VARCHAR(255),
    "BaseDiameX" VARCHAR(255),
    "CheminBaseDiameX" VARCHAR(255),
    "ProgDiameX" VARCHAR(255),
    "createdAt" TIMESTAMPTZ NOT NULL DEFAULT now(),
    "updatedAt" TIMESTAMPTZ NOT NULL DEFAULT now()
);
CREATE TRIGGER update_bases_updated_at BEFORE UPDATE ON "Bases" FOR EACH ROW EXECUTE PROCEDURE update_updated_at_column();

-- Postes
CREATE TABLE "Postes" (
    "ID" INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    "NomPoste" VARCHAR(255) NOT NULL,
    "Verrou" BOOLEAN DEFAULT FALSE,
    "NiveauMenu" INT,
    "createdAt" TIMESTAMPTZ NOT NULL DEFAULT now(),
    "updatedAt" TIMESTAMPTZ NOT NULL DEFAULT now()
);
CREATE TRIGGER update_postes_updated_at BEFORE UPDATE ON "Postes" FOR EACH ROW EXECUTE PROCEDURE update_updated_at_column();

-- Regions
CREATE TABLE "Regions" (
    "ID" INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    "Nom" VARCHAR(255) NOT NULL,
    "createdAt" TIMESTAMPTZ NOT NULL DEFAULT now(),
    "updatedAt" TIMESTAMPTZ NOT NULL DEFAULT now()
);
CREATE TRIGGER update_regions_updated_at BEFORE UPDATE ON "Regions" FOR EACH ROW EXECUTE PROCEDURE update_updated_at_column();

-- Districts
CREATE TABLE "Districts" (
    "ID" INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    "Nom" VARCHAR(255) NOT NULL,
    "RegionID" INT REFERENCES "Regions"("ID") ON DELETE CASCADE ON UPDATE CASCADE,
    "createdAt" TIMESTAMPTZ NOT NULL DEFAULT now(),
    "updatedAt" TIMESTAMPTZ NOT NULL DEFAULT now()
);
CREATE TRIGGER update_districts_updated_at BEFORE UPDATE ON "Districts" FOR EACH ROW EXECUTE PROCEDURE update_updated_at_column();

-- Communes
CREATE TABLE "Communes" (
    "ID" INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    "Nom" VARCHAR(255) NOT NULL,
    "DistrictID" INT REFERENCES "Districts"("ID") ON DELETE CASCADE ON UPDATE CASCADE,
    "NomMaire" VARCHAR(255),
    "ContactMaire" VARCHAR(255),
    "NomPresidentConseil" VARCHAR(255),
    "ContactPresidentConseil" VARCHAR(255),
    "NomPremierConseiller" VARCHAR(255),
    "ContactPremierConseiller" VARCHAR(255),
    "NomSecondConseiller" VARCHAR(255),
    "ContactSecondConseiller" VARCHAR(255),
    "NomTroisiemeConseiller" VARCHAR(255),
    "ContactTroisiemeConseiller" VARCHAR(255),
    "NomQuatriemeConseiller" VARCHAR(255),
    "ContactQuatriemeConseiller" VARCHAR(255),
    "NomCinquiemeConseiller" VARCHAR(255),
    "ContactCinquiemeConseiller" VARCHAR(255),
    "createdAt" TIMESTAMPTZ NOT NULL DEFAULT now(),
    "updatedAt" TIMESTAMPTZ NOT NULL DEFAULT now()
);
CREATE TRIGGER update_communes_updated_at BEFORE UPDATE ON "Communes" FOR EACH ROW EXECUTE PROCEDURE update_updated_at_column();

-- Villages
CREATE TABLE "Villages" (
    "ID" INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    "Nom" VARCHAR(255) NOT NULL,
    "CommuneID" INT REFERENCES "Communes"("ID") ON DELETE CASCADE ON UPDATE CASCADE,
    "ClasseAdmin" classe_admin_enum,
    "Accessibilite" accessibilite_enum,
    "DistanceKm" REAL,
    "DepartPourTaxiBrousse" VARCHAR(50),
    "NbHeuresMarche" REAL,
    "IDXls" INT,
    "createdAt" TIMESTAMPTZ NOT NULL DEFAULT now(),
    "updatedAt" TIMESTAMPTZ NOT NULL DEFAULT now()
);
CREATE TRIGGER update_villages_updated_at BEFORE UPDATE ON "Villages" FOR EACH ROW EXECUTE PROCEDURE update_updated_at_column();

-- Parcelles
CREATE TABLE "Parcelles" (
    "ID" INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    "Nom" VARCHAR(255) NOT NULL,
    "VillageID" INT REFERENCES "Villages"("ID") ON DELETE CASCADE ON UPDATE CASCADE,
    "NombreHabitants" INT,
    "NombreMenages" INT,
    "SourceDonnees" VARCHAR(255),
    "createdAt" TIMESTAMPTZ NOT NULL DEFAULT now(),
    "updatedAt" TIMESTAMPTZ NOT NULL DEFAULT now()
);
CREATE TRIGGER update_parcelles_updated_at BEFORE UPDATE ON "Parcelles" FOR EACH ROW EXECUTE PROCEDURE update_updated_at_column();

-- Employes
CREATE TABLE "Employes" (
    "ID" INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    "Nom" VARCHAR(255) NOT NULL,
    "Prenom" VARCHAR(255),
    "PosteID" INT NOT NULL REFERENCES "Postes"("ID") ON DELETE CASCADE ON UPDATE CASCADE,
    "DateEmbauche" TIMESTAMPTZ,
    "DateDebauchage" TIMESTAMPTZ,
    "MotDePasse" VARCHAR(255),
    "Surnom" VARCHAR(50) NOT NULL UNIQUE,
    "BaseID" INT REFERENCES "Bases"("ID") ON DELETE SET NULL ON UPDATE CASCADE,
    "ReferentID" INT REFERENCES "Employes"("ID") ON DELETE SET NULL ON UPDATE CASCADE,
    "NumeroCNaPS" VARCHAR(12),
    "NumeroCIN" VARCHAR(12),
    "NumeroTelephone" VARCHAR(9),
    "AdresseMail" VARCHAR(255),
    "NombreEnfantsCharge" INT DEFAULT 0,
    "EstSalarie" BOOLEAN DEFAULT FALSE,
    "createdAt" TIMESTAMPTZ NOT NULL DEFAULT now(),
    "updatedAt" TIMESTAMPTZ NOT NULL DEFAULT now()
);
CREATE TRIGGER update_employes_updated_at BEFORE UPDATE ON "Employes" FOR EACH ROW EXECUTE PROCEDURE update_updated_at_column();

-- Comptes
CREATE TABLE "Comptes" (
    "ID" INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    "NumeroCompte" INT NOT NULL,
    "NomCompte" VARCHAR(255) NOT NULL,
    "Detail" BOOLEAN DEFAULT FALSE,
    "Verrou" BOOLEAN DEFAULT FALSE,
    "OrganisationID" INT REFERENCES "Organisations"("ID") ON DELETE CASCADE ON UPDATE CASCADE,
    "ARecouperHydriaDiameX" BOOLEAN DEFAULT FALSE,
    "Achat" BOOLEAN DEFAULT FALSE,
    "createdAt" TIMESTAMPTZ NOT NULL DEFAULT now(),
    "updatedAt" TIMESTAMPTZ NOT NULL DEFAULT now()
);
CREATE TRIGGER update_comptes_updated_at BEFORE UPDATE ON "Comptes" FOR EACH ROW EXECUTE PROCEDURE update_updated_at_column();

-- Journaux
CREATE TABLE "Journaux" (
    "ID" INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    "Nom" VARCHAR(255) NOT NULL,
    "BaseID" INT REFERENCES "Bases"("ID") ON DELETE CASCADE ON UPDATE CASCADE,
    "Compte" INT NOT NULL,
    "Code" VARCHAR(6) NOT NULL,
    "createdAt" TIMESTAMPTZ NOT NULL DEFAULT now(),
    "updatedAt" TIMESTAMPTZ NOT NULL DEFAULT now()
);
CREATE TRIGGER update_journaux_updated_at BEFORE UPDATE ON "Journaux" FOR EACH ROW EXECUTE PROCEDURE update_updated_at_column();

-- Magasins
CREATE TABLE "Magasins" (
    "ID" INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    "Nom" VARCHAR(255) NOT NULL,
    "Compte" INT,
    "Code" VARCHAR(6),
    "BaseID" INT REFERENCES "Bases"("ID") ON DELETE CASCADE ON UPDATE CASCADE,
    "createdAt" TIMESTAMPTZ NOT NULL DEFAULT now(),
    "updatedAt" TIMESTAMPTZ NOT NULL DEFAULT now()
);
CREATE TRIGGER update_magasins_updated_at BEFORE UPDATE ON "Magasins" FOR EACH ROW EXECUTE PROCEDURE update_updated_at_column();

-- Gestionnaires
CREATE TABLE "Gestionnaires" (
    "ID" INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    "Nom" VARCHAR(255) NOT NULL,
    "Contact" VARCHAR(255),
    "createdAt" TIMESTAMPTZ NOT NULL DEFAULT now(),
    "updatedAt" TIMESTAMPTZ NOT NULL DEFAULT now()
);
CREATE TRIGGER update_gestionnaires_updated_at BEFORE UPDATE ON "Gestionnaires" FOR EACH ROW EXECUTE PROCEDURE update_updated_at_column();

-- TypesActivites
CREATE TABLE "TypesActivites" (
    "ID" INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    "NomType" VARCHAR(255) NOT NULL,
    "createdAt" TIMESTAMPTZ NOT NULL DEFAULT now(),
    "updatedAt" TIMESTAMPTZ NOT NULL DEFAULT now()
);
CREATE TRIGGER update_typesactivites_updated_at BEFORE UPDATE ON "TypesActivites" FOR EACH ROW EXECUTE PROCEDURE update_updated_at_column();

-- Activites
CREATE TABLE "Activites" (
    "ID" INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    "Nom" VARCHAR(255) NOT NULL,
    "TypeActiviteID" INT REFERENCES "TypesActivites"("ID") ON DELETE CASCADE ON UPDATE CASCADE,
    "Verrou" BOOLEAN DEFAULT FALSE,
    "createdAt" TIMESTAMPTZ NOT NULL DEFAULT now(),
    "updatedAt" TIMESTAMPTZ NOT NULL DEFAULT now()
);
CREATE TRIGGER update_activites_updated_at BEFORE UPDATE ON "Activites" FOR EACH ROW EXECUTE PROCEDURE update_updated_at_column();

-- Tables manquantes du script original, nécessaires pour PlanningsDetails
CREATE TABLE "TypeDesignations" (
    "ID" INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    "NomType" VARCHAR(255) NOT NULL,
    "createdAt" TIMESTAMPTZ NOT NULL DEFAULT now(),
    "updatedAt" TIMESTAMPTZ NOT NULL DEFAULT now()
);
CREATE TRIGGER update_typedesignations_updated_at BEFORE UPDATE ON "TypeDesignations" FOR EACH ROW EXECUTE PROCEDURE update_updated_at_column();

CREATE TABLE "Designations" (
    "ID" INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    "Nom" VARCHAR(255) NOT NULL,
    "TypeDesignationID" INT REFERENCES "TypeDesignations"("ID"),
    "Description" TEXT,
    "DateCreation" TIMESTAMPTZ,
    "DateModification" TIMESTAMPTZ,
    "Verrou" BOOLEAN DEFAULT FALSE,
    "createdAt" TIMESTAMPTZ NOT NULL DEFAULT now(),
    "updatedAt" TIMESTAMPTZ NOT NULL DEFAULT now()
);
CREATE TRIGGER update_designations_updated_at BEFORE UPDATE ON "Designations" FOR EACH ROW EXECUTE PROCEDURE update_updated_at_column();

-- Plannings (avec virgule corrigée)
CREATE TABLE "Plannings" (
    "ID" INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    "Date" TIMESTAMPTZ NOT NULL,
    "OuvrageID" INT REFERENCES "Ouvrages"("ID") ON DELETE SET NULL ON UPDATE CASCADE,
    "EmployeID" INT NOT NULL REFERENCES "Employes"("ID") ON DELETE CASCADE ON UPDATE CASCADE,
    "ActiviteID" INT NOT NULL REFERENCES "Activites"("ID") ON DELETE CASCADE ON UPDATE CASCADE,
    "Remarque" TEXT,
    "DateSignalementActivite" TIMESTAMPTZ,
    "EstValide" BOOLEAN DEFAULT FALSE,
    "DebitMesure" REAL,
    "Bilan" TEXT,
    "SuiteADonner" TEXT,
    "createdAt" TIMESTAMPTZ NOT NULL DEFAULT now(),
    "updatedAt" TIMESTAMPTZ NOT NULL DEFAULT now()
);
CREATE TRIGGER update_plannings_updated_at BEFORE UPDATE ON "Plannings" FOR EACH ROW EXECUTE PROCEDURE update_updated_at_column();

-- PlanningsDetails
CREATE TABLE "PlanningsDetails" (
    "ID" INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    "PlanningID" INT NOT NULL REFERENCES "Plannings"("ID") ON DELETE CASCADE ON UPDATE CASCADE,
    "OuvrageConstitutif" VARCHAR(255),
    "DesignationID" INT NOT NULL REFERENCES "Designations"("ID") ON DELETE CASCADE ON UPDATE CASCADE,
    "Quantite" REAL,
    "PrixUnitaire" REAL,
    "Montant" REAL,
    "AcheteurID" INT REFERENCES "Employes"("ID") ON DELETE SET NULL ON UPDATE CASCADE,
    "MagasinID" INT REFERENCES "Magasins"("ID") ON DELETE SET NULL ON UPDATE CASCADE,
    "CompteID" INT REFERENCES "Comptes"("ID") ON DELETE SET NULL ON UPDATE CASCADE,
    "EstLivre" BOOLEAN DEFAULT FALSE,
    "EstRetourne" BOOLEAN DEFAULT FALSE,
    "NumeroDiameX" VARCHAR(255),
    "BaseDiameX" VARCHAR(255),
    "createdAt" TIMESTAMPTZ NOT NULL DEFAULT now(),
    "updatedAt" TIMESTAMPTZ NOT NULL DEFAULT now()
);
CREATE TRIGGER update_planningsdetails_updated_at BEFORE UPDATE ON "PlanningsDetails" FOR EACH ROW EXECUTE PROCEDURE update_updated_at_column();

-- TypesPointsEaus
CREATE TABLE "TypesPointsEaus" (
    "ID" INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    "NomType" VARCHAR(255) NOT NULL,
    "CategoriePointEau" categorie_point_eau_enum,
    "ModalitePaiement" modalite_paiement_enum,
    "createdAt" TIMESTAMPTZ NOT NULL DEFAULT now(),
    "updatedAt" TIMESTAMPTZ NOT NULL DEFAULT now()
);
CREATE TRIGGER update_typespointseaus_updated_at BEFORE UPDATE ON "TypesPointsEaus" FOR EACH ROW EXECUTE PROCEDURE update_updated_at_column();

-- CompteurTetes
CREATE TABLE "CompteurTetes" (
    "ID" INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    "OuvrageID" INT REFERENCES "Ouvrages"("ID") ON DELETE CASCADE ON UPDATE CASCADE,
    "NumeroCompteur" VARCHAR(255) NOT NULL,
    "createdAt" TIMESTAMPTZ NOT NULL DEFAULT now(),
    "updatedAt" TIMESTAMPTZ NOT NULL DEFAULT now()
);
CREATE TRIGGER update_compteurtetes_updated_at BEFORE UPDATE ON "CompteurTetes" FOR EACH ROW EXECUTE PROCEDURE update_updated_at_column();

-- PointsEaus
CREATE TABLE "PointsEaus" (
    "ID" INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    "NomAbonne" VARCHAR(255),
    "ContactAbonne" VARCHAR(255),
    "CompteurTeteID" INT REFERENCES "CompteurTetes"("ID") ON DELETE SET NULL ON UPDATE CASCADE,
    "TypePointEauID" INT REFERENCES "TypesPointsEaus"("ID") ON DELETE CASCADE ON UPDATE CASCADE,
    "OuvrageID" INT REFERENCES "Ouvrages"("ID") ON DELETE CASCADE ON UPDATE CASCADE,
    "ParcelleID" INT REFERENCES "Parcelles"("ID") ON DELETE CASCADE ON UPDATE CASCADE,
    "DateBranchement" TIMESTAMPTZ,
    "DateArretBranchement" TIMESTAMPTZ,
    "Latitude" REAL,
    "Longitude" REAL,
    "TypeAbonne" TEXT,
    "EstBranchementInstitutionnel" BOOLEAN DEFAULT FALSE,
    "TarifForfaitaire" REAL,
    "NumeroDiameXDemande" INT,
    "NumeroDiameXPaiementDevis" VARCHAR(50),
    "BaseDiameXDemande" INT,
    "BaseDiameXPaiementDevis" VARCHAR(50),
    "MontantDemandePaye" REAL,
    "MontantDevisPaye" REAL,
    "createdAt" TIMESTAMPTZ NOT NULL DEFAULT now(),
    "updatedAt" TIMESTAMPTZ NOT NULL DEFAULT now()
);
CREATE TRIGGER update_pointseaus_updated_at BEFORE UPDATE ON "PointsEaus" FOR EACH ROW EXECUTE PROCEDURE update_updated_at_column();

-- CartesSociales
CREATE TABLE "CartesSociales" (
    "ID" INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    "NomBeneficiaire" VARCHAR(255) NOT NULL,
    "PointEauID" INT REFERENCES "PointsEaus"("ID") ON DELETE CASCADE ON UPDATE CASCADE,
    "createdAt" TIMESTAMPTZ NOT NULL DEFAULT now(),
    "updatedAt" TIMESTAMPTZ NOT NULL DEFAULT now()
);
CREATE TRIGGER update_cartessociales_updated_at BEFORE UPDATE ON "CartesSociales" FOR EACH ROW EXECUTE PROCEDURE update_updated_at_column();

-- ActivitesPostes
CREATE TABLE "ActivitesPostes" (
    "ID" INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    "ActiviteID" INT REFERENCES "Activites"("ID") ON DELETE CASCADE ON UPDATE CASCADE,
    "PosteID" INT REFERENCES "Postes"("ID") ON DELETE CASCADE ON UPDATE CASCADE,
    "createdAt" TIMESTAMPTZ NOT NULL DEFAULT now(),
    "updatedAt" TIMESTAMPTZ NOT NULL DEFAULT now()
);
CREATE TRIGGER update_activitespostes_updated_at BEFORE UPDATE ON "ActivitesPostes" FOR EACH ROW EXECUTE PROCEDURE update_updated_at_column();

-- =============================================
-- 4. DONNÉES DE TEST
-- =============================================

-- Organisation par défaut
INSERT INTO "Organisations" ("Nom") VALUES ('Soakoja');

-- Type d'ouvrage par défaut
INSERT INTO "TypesOuvrages" ("NomType") VALUES ('AEPG');

-- Ouvrage par défaut
INSERT INTO "Ouvrages" ("Nom", "TypeOuvrageID", "OrganisationID") VALUES ('Ouvrage principal', 1, 1);

-- Base par défaut
INSERT INTO "Bases" ("Nom", "OrganisationID", "OuvrageID") VALUES ('Base principale', 1, 1);

-- Poste par défaut
INSERT INTO "Postes" ("NomPoste", "NiveauMenu") VALUES ('Administrateur', 4);

-- Utilisateur administrateur par défaut (mot de passe hashé pour "IA")
INSERT INTO "Employes" ("Nom", "Prenom", "Surnom", "MotDePasse", "PosteID", "BaseID", "EstSalarie", "DateEmbauche")
VALUES ('ANDRIATSILAVINA', 'Harijaona Antoine', 'Tsilavina', '$2b$12$vQrqE8WGlTJ7.kxJ1Y1j0u5h1FhKhG9Dq0v5o1d2O6h9H6O2D3f4G', 1, 1, TRUE, now());

-- Régions de Madagascar
INSERT INTO "Regions" ("Nom") VALUES 
('Analamanga'), ('Analanjirofo'), ('Fitovinany'), ('Atsimo Atsinanana');

-- Types d'activités
INSERT INTO "TypesActivites" ("NomType") VALUES 
('Maintenance'), ('Installation'), ('Contrôle'), ('Formation');

-- Activités de base
INSERT INTO "Activites" ("Nom", "TypeActiviteID") VALUES 
('Maintenance pompe', 1), ('Installation compteur', 2), ('Contrôle qualité eau', 3);

-- Types de points d'eau
INSERT INTO "TypesPointsEaus" ("NomType", "CategoriePointEau", "ModalitePaiement") VALUES
('Borne fontaine', 'Public', 'Au volume'),
('Branchement privé', 'Privé', 'Au volume');